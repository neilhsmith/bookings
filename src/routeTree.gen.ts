/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthorizedRouteImport } from './routes/unauthorized'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthedProfileRouteImport } from './routes/_authed/profile'
import { Route as AuthedPostsRouteImport } from './routes/_authed/posts'
import { Route as AuthedPostsIndexRouteImport } from './routes/_authed/posts.index'
import { Route as AuthedPostsNewRouteImport } from './routes/_authed/posts/new'
import { Route as AuthedPostsPostIdRouteImport } from './routes/_authed/posts.$postId'

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedProfileRoute = AuthedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedPostsRoute = AuthedPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedPostsIndexRoute = AuthedPostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedPostsRoute,
} as any)
const AuthedPostsNewRoute = AuthedPostsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AuthedPostsRoute,
} as any)
const AuthedPostsPostIdRoute = AuthedPostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => AuthedPostsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/posts': typeof AuthedPostsRouteWithChildren
  '/profile': typeof AuthedProfileRoute
  '/posts/$postId': typeof AuthedPostsPostIdRoute
  '/posts/new': typeof AuthedPostsNewRoute
  '/posts/': typeof AuthedPostsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/profile': typeof AuthedProfileRoute
  '/posts/$postId': typeof AuthedPostsPostIdRoute
  '/posts/new': typeof AuthedPostsNewRoute
  '/posts': typeof AuthedPostsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/unauthorized': typeof UnauthorizedRoute
  '/_authed/posts': typeof AuthedPostsRouteWithChildren
  '/_authed/profile': typeof AuthedProfileRoute
  '/_authed/posts/$postId': typeof AuthedPostsPostIdRoute
  '/_authed/posts/new': typeof AuthedPostsNewRoute
  '/_authed/posts/': typeof AuthedPostsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/unauthorized'
    | '/posts'
    | '/profile'
    | '/posts/$postId'
    | '/posts/new'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/unauthorized'
    | '/profile'
    | '/posts/$postId'
    | '/posts/new'
    | '/posts'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/unauthorized'
    | '/_authed/posts'
    | '/_authed/profile'
    | '/_authed/posts/$postId'
    | '/_authed/posts/new'
    | '/_authed/posts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  UnauthorizedRoute: typeof UnauthorizedRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/profile': {
      id: '/_authed/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthedProfileRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/posts': {
      id: '/_authed/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof AuthedPostsRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/posts/': {
      id: '/_authed/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof AuthedPostsIndexRouteImport
      parentRoute: typeof AuthedPostsRoute
    }
    '/_authed/posts/new': {
      id: '/_authed/posts/new'
      path: '/new'
      fullPath: '/posts/new'
      preLoaderRoute: typeof AuthedPostsNewRouteImport
      parentRoute: typeof AuthedPostsRoute
    }
    '/_authed/posts/$postId': {
      id: '/_authed/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof AuthedPostsPostIdRouteImport
      parentRoute: typeof AuthedPostsRoute
    }
  }
}

interface AuthedPostsRouteChildren {
  AuthedPostsPostIdRoute: typeof AuthedPostsPostIdRoute
  AuthedPostsNewRoute: typeof AuthedPostsNewRoute
  AuthedPostsIndexRoute: typeof AuthedPostsIndexRoute
}

const AuthedPostsRouteChildren: AuthedPostsRouteChildren = {
  AuthedPostsPostIdRoute: AuthedPostsPostIdRoute,
  AuthedPostsNewRoute: AuthedPostsNewRoute,
  AuthedPostsIndexRoute: AuthedPostsIndexRoute,
}

const AuthedPostsRouteWithChildren = AuthedPostsRoute._addFileChildren(
  AuthedPostsRouteChildren,
)

interface AuthedRouteChildren {
  AuthedPostsRoute: typeof AuthedPostsRouteWithChildren
  AuthedProfileRoute: typeof AuthedProfileRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedPostsRoute: AuthedPostsRouteWithChildren,
  AuthedProfileRoute: AuthedProfileRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  UnauthorizedRoute: UnauthorizedRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
